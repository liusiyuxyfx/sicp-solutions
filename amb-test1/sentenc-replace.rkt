#lang planet neil/sicp
(define not-word '(not not))
(define verbs '(verb is eat eats kills beats kill beat))
(define nouns '(nounce smart pig wolf snake enemy animal lazy dumb))
(define judges '(judge good bad))
(define articles '(article a the an))
;;;;;;;;;;;;;;SENTENCES;;;;;;;;;;;;;;;;;;;;;;
(define sentencea '(sentence (verb-phrase
                              (verb eat)
                              (noun-phrase (noun animal)))
                             (is is)
                             (judge-phrase (judge bad))))
(define sentenceb '(sentence (noun-phrase (noun pig))
                             (is is)
                             (noun-phrase
                              (article an)
                              (noun animal))))
(define sentencec '(sentence (noun-phrase (noun lazy))
                             (is is)
                             (judge-phrase (not not)
                                           (judge good))))
(define sentenced '(sentence (noun-phrase (noun dumb))
                            (is is)
                            (judge-phrase (not not)
                                          (judeg good))))
(define sentencee '(sentence (noun-phrase (noun smart))
                             (is is)
                             (judge-phrase (judge good))))
(define sentencef '(sentence (verb-phrase (verb beat)
                                          (noun-phrase (noun enemy)))
                             (is is)
                             (judge-phrase (judge great))))
(define sentenceg '(sentence (verb-phrase (verb kill)
                                          (noun-phrase (noun animal)))
                             (is is)
                             (judge-phrase (judge bad))))
(define sentenceh '(sentence (noun-phrase (noun wolf))
                             (is is)
                             (noun-phrase (article an)
                                          (noun-phrase animal))))
(define sentencei '(sentence (noun-phrase (noun snake))
                             (is is)
                             (noun-phrase (article an)
                                          (noun animal))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (display-sentence sentence)
  (display sentence)
  (newline))
(define (replace-word exp)
  (cond ((eq? exp 'eats) 'eat)
        ((eq? exp 'kills) 'kill)
        ((eq? exp 'beats) 'beat)
        (else exp)))
;;;;;;;;;;;;;;;;;;;;PHRASE-OPERATION;;;;;;;;;;;;;;;;;;
(define (name phrase)
  (car phrase))
(define (word phrase)
  (cadr phrase))
(define (get-a-phrase com-phrase word-name)
  (define (iter-get-phrase g-phrase)
    (let ((first (car g-phrase))
          (rest (cdr g-phrase)))
      (cond ((null? rest) first)
            ((eq? (name first) word-name) first)
            (else (iter-get-phrase rest)))))
  (iter-get-phrase (cdr com-phrase)))
;;;;;;;;;;;;;;;;;;;;FIRST-PHRASE;;;;;;;;;;;;;;;;;;;;;;
(define (first-phrase sentence)
  (cadr sentence))
;;;;;;;;;;;;;;;;;;;;MID-VERB;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (mid-verb sentence)
  (caddr sentence))
;;;;;;;;;;;;;;;;;;;;SECOND-PHRASE;;;;;;;;;;;;;;;;;;;;;
(define (second-phrase sentence)
  (cadddr sentence))
;;;;;;;;;;;;;;;;;NOUN-PHRASE;;;;;;;;;;;;;;;;;;;;;;;;
(define (noun-phrase? exp)
  (eq? (car exp) 'noun-phrase))
(define (get-noun noun-phrase)
  (word (get-a-phrase noun-phrase 'noun)))
;;;;;;;;;;;;;;;;;VERB-PHRASE;;;;;;;;;;;;;;;;;;;;;;;
(define (verb-phrase? exp)
  (eq? (car exp) 'verb-phrase))
(define (is? a-verb)
  (eq? (cadr a-verb) 'is))
(define (cons-verb-phrase exp)
  (list 'verb-phrase
        (list 
          (replace-word (word (get-a-phrase exp 'verb)))
          (word (get-a-phrase (get-a-phrase exp 'noun-phrase) 'noun)))))
;;;;;;;;;;;;;;;;;judge-phrase;;;;;;;;;;;;;;;;;;;;;;;
(define (judge-phrase? exp)
  (eq? (car exp) 'judge-phrase))
(define (cons-judge-phrase exp)
  (list 'judge-phrase
     (if (eq? (name (cadr exp)) 'not)
         (list 'not (word (get-a-phrase exp 'judge)))
         (word (get-a-phrase exp 'judge)))))
;;;;;;;;;;;;;;;;;;simplify-sentence;;;;;;;;;;;;;;;;;;;;;;;;
;(display (get-noun (first-phrase sentencea)))
(define (simplify-sentence sentence)
  (let ((first (first-phrase sentence))
        (mid (mid-verb sentence)))
  (if (is? (mid-verb sentence))
      (let ((second (second-phrase sentence)))
          (begin (if (noun-phrase? first)
                     (set! first (list 'noun-phrase (get-noun first)))
                     (set! first (cons-verb-phrase first)))
                 (if (judge-phrase? second)
                     (set! second (cons-judge-phrase second))
                     (set! second (list 'noun-phrase (get-noun second))))
                 (list 'sentence  first '(is is) second)))
     (begin (set! first (list 'noun-phrase (get-noun first)))
             (set! mid (cons-verb-phrase mid))
             (list 'sentence first mid)))))
;;;;;;;;;;;;;;;;sentence-list;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define *sentence-list* '*sentence-list*)
(define (add-to-list input)
  (set! *sentence-list* (list *sentence-list* (simplify-sentence input))))

(define (cons-verb-noun a-verb-phrase)
    (let ((exp (list 'noun-phrase (cadadr a-verb-phrase))))
      ;(display-sentence exp)
    (if (eq? (look-up-noun exp) 'fail)
        a-verb-phrase
        (list 'verb-phrase (list (caadr a-verb-phrase) (cadr (look-up-noun exp)))))))

(define (look-up-judge find)
  (look-up find 'judge-phrase))
(define (look-up-noun find)
  (look-up find 'noun-phrase))

(define (look-up find target-name)
  (define (loop-iter list)
      ;(display-sentence (first-phrase (cadr list)))
      ;(display-sentence (
      (cond ((equal? list '*sentence-list*) 'fail)
            ((equal? (first-phrase (cadr list)) find)
             (if (eq? target-name (car (second-phrase (cadr list))))
                 (second-phrase (cadr list))
                 (look-up (second-phrase (cadr list)))))
            (else (loop-iter (car list)))))
  (loop-iter *sentence-list*))
;;;;;;;;;;;;;;;;;;;;main;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (get-ans input)
  (let ((sim-input (simplify-sentence input)))
    (if (is? (mid-verb sim-input))
        (display-sentence (list (word (first-phrase sim-input))
                                'is
                                (word (look-up-judge (second-phrase sim-input)))))
        (display-sentence (list (word (first-phrase sim-input))
                                'is
                                (word (look-up-judge (cons-verb-noun (mid-verb sim-input)))))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;test;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(display-sentence (simplify-sentence sentencea))
;(display-sentence (simplify-sentence sentenceb))
;(display-sentence (simplify-sentence sentencec))
;(display-sentence (simplify-sentence sentenced))
;(display-sentence (simplify-sentence sentencee))
;(display-sentence (simplify-sentence sentencef))
;(display-sentence (simplify-sentence sentenceg))
;(display-sentence (simplify-sentence sentenceh))
;(display-sentence (simplify-sentence sentencei))
(add-to-list sentencea)
(add-to-list sentenceb)
(add-to-list sentencec)
(add-to-list sentenced)
(add-to-list sentencee)
(add-to-list sentencef)
(add-to-list sentenceg)
(add-to-list sentenceh)
(add-to-list sentencei)
;snake is smart
(define sentence1 '(sentence (noun-phrase (noun snake))
                             (is is)
                             (noun-phrase (noun smart))))
;wolf eat a pig
(define sentence2 '(sentence (noun-phrase (noun wolf))
                             (verb-phrase
                              (verb eat)
                              (noun-phrase (article )
                                           (noun pig)))))
;snake kills a wolf
(define sentence3 '(sentence (noun-phrase (noun snake))
                             (verb-phrase (verb kills)
                                          (noun-phrase (article a)
                                                       (noun wolf)))))
;wolf is dump
(define sentence4 '(sentence (noun-phrase (noun wolf))
                             (is is)
                             (noun-phrase (noun dumb))))
(get-ans sentence1)
(get-ans sentence2)
(get-ans sentence3)
(get-ans sentence4)

;(mid-verb (simplify-sentence sentence2))
;(cons-verb-noun (mid-verb (simplify-sentence sentence3)))
;(display-sentence (look-up-judge (cons-verb-noun (mid-verb (simplify-sentence sentence3)))))
;(display-sentence *sentence-list*)