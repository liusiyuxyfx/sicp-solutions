#lang planet neil/sicp
(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-deque?) (null? front-ptr))
    (define (front-deque) front-ptr)
    (define (rear-deque) rear-ptr)
    (define (print)
      (define (print-iter item ans)
          (if (null? (cadr item))
              (append ans (cons (car item) '()))
              (print-iter (cddr item) (append ans (cons (car item) '())))))
      (print-iter front-ptr '()))
    (define (front-insert-deque! item)
      (let ((new-pair (list item '() '())))
        (cond ((empty-deque?)
               (begin (set! front-ptr new-pair)
                      (set! rear-ptr new-pair)
                      (print)))
              (else (begin (set-cdr! (cdr new-pair) front-ptr)
                           (set-car! (cdr front-ptr) new-pair)
                           (set! front-ptr new-pair)
                           (print))))))
    (define (rear-insert-deque! item)
      (let ((new-pair (list item '() '())))
        (cond ((empty-deque?)
               (begin (set! front-ptr new-pair)
                      (set! rear-ptr new-pair)
                      (print)))
              (else (begin (set-cdr! (cdr rear-ptr) new-pair)
                           (set-car! (cdr new-pair) rear-ptr)
                           (set! rear-ptr new-pair)
                           (print))))))
    (define (front-delete-deque!)
      (begin (set! front-ptr (cddr front-ptr))
             (set-car! (cdr front-ptr) '())
             (print)))
    (define (rear-delete-deque!)
      (begin (set! rear-ptr (cadr rear-ptr))
             (set-cdr! (cdr rear-ptr) '())
             (print)))
    (define (dispatch m)
      (cond ((eq? m 'front-deque) (newline) (display (front-deque)))
            ((eq? m 'rear-deque) (newline) (display (rear-deque)))
            ((eq? m 'print) (newline) (display (print)))
            ((eq? m 'front-insert-deque!) front-insert-deque!)
            ((eq? m 'rear-insert-deque!) rear-insert-deque!)
            ((eq? m 'front-delete-deque!) (front-delete-deque!))
            ((eq? m 'rear-delete-deque!) (rear-delete-deque!))))
    dispatch))
