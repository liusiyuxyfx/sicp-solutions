#lang planet neil/sicp
(define (scan-var var env proc)
  (define (scan-loop env)
    (define (scan vars vals)
      (define (dispatch procs vars)
        (cond ((pair? proc) (set-car! vars (cdr procs)))
              (else (car vals)))))
      (cond ((null? vars)
             (if (and (pair? proc) (eq? (car proc) 'define-variable))
                 (add-binding-to-frame! var (cdr proc) frame)
                 (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (dispatch proc vars))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
    (scan-loop env))
(define (set-variable-value! var val env)
  (scan-var var env (cons 'set-variable-value! val)))
(define (define-varibale! var val env)
  (scan-var var env (cons 'define-variable! val)))
(define (lookup-variable-value var env)
  (scan-var var env 'look-up-variable-value))