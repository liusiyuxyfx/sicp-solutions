#lang swindle
(define (judge a b)
  (or (and a (not b))
      (and b (not a))))
(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))
(define (require p)
  (if (not p) (amb)))
  
(define (ranklist)
  (let ((betty (amb 1 2 3 4 5))
        (ether (amb 1 2 3 4 5))
        (joan (amb 1 2 3 4 5))
        (kitty (amb 1 2 3 4 5))
        (mary (amb 1 2 3 4 5)))
    (require (distinct? (list betty ether joan kitty mary)))
    (require (judge (= kitty 2) (= betty 3)))
    (require (judge (= ether 1) (= joan 2)))
    (require (judge (= joan 3) (= ether 5)))
    (require (judge (= kitty 2) (= mary 4)))
    (require (judge (= mary 4) (= betty 1)))
    (list (list 'betty betty)
          (list 'ether ether)
          (list 'joan joan)
          (list 'kitty kitty)
          (list 'mary mary))))