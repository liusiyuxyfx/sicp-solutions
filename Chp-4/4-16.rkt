#lang planet neil/sicp
;a
(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars))
             (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unbound variable" var)
        (let ((frame (first-frame env)))
          (scan (frame-variables frame)
                (frame-values frame)))))
  (let ((ans (env-loop env)))
    (if (eq? ans '*unassigned*)
        (error "unassigned")
        ans)))
;b
(define (scan-out-defines app)
  (let* ((def (filter (lambda (x) (definition? x) (app))))
         (no-def (filter (lambda (x) (not (defintion? x)  (app)))))
         (def-vars (map definition-variable def))
         (def-vals (map definition-value exp)))
    (define (set-var-val vars vals)
      (map (lambda (x y) (list 'set! x y)) vars vals))
    (define (init-env vars)
      (map (lambda (x) (list x '*unassigned*)) vars))
    (append (list 'let (init-env def-vars))
            (set-var-val def-vars def-vals)
            no-def)))
;c
(define (make-procedure parameters body env)
  (list 'procedure parameters (scan-out-defines body) env)))