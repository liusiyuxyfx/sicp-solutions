#lang planet neil/sicp
(define (make-vect x y) (cons x y))
(define (xcor-vect vect) (car vect))
(define (ycor-vect vect) (cdr vect))
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame) (car frame))
(define (edge1-frame frame) (cadr frame))
(define (edge2-frame frame) (caddr frame))
(define (sub-vect vect1 vect2)
  (make-vect (- (xcor-vect vect1)
                (xcor-vect vect2))
             (- (ycor-vect vect1)
                (ycor-vect vect2))))
(define (make-segment star-vect end-vect)
  (cons star-vect end-vect))
(define (star-segment segment)
  (car segment))
(define (end-segment segment)
  (cdr segment))
(define (scale-vect vect s)
  (make-vect (* (xcor-vect vect) s)
             (* (ycor-vect vect) s)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;a
(define (limit-painter frame)
  (let ((origin (origin-frame frame))
        (edge1 (edge1-frame frame))
        (edge2 (edge2-frame frame))
        (top (make-vect (- (xcor-vect (edge2-frame frame)
                           (xcor-vect (origin-frame frame))
                        (- (ycor-vect (edge1-frame frame)
                           (ycor-vect (origin-frame frame)))))))))
    (segment->painter (list (make-segment origin edge1)
                            (make-segment edge1 top)
                            (make-segment top edge2)
                            (make-segment edge2 origin)))))
;b
(defien (fork-painter frame)
  (let ((origin (origin-frame frame))
        (edge1 (edge1-frame frame))
        (edge2 (edge2-frame frame))
        (top (make-vect (- (xcor-vect (edge2-frame frame)
                           (xcor-vect (origin-frame frame))
                        (- (ycor-vect (edge1-frame frame)
                           (ycor-vect (origin-frame frame)))))))))
    (segment->painter (list (make-segment edge1 edge2)
                            (make-segment top origin)))))
;c
(define (half vect) (scale-vect vect (/1 2)))

(define (rhombus-painter frame)
  (let ((origin (origin-frame frame))
        (edge1 (edge1-frame frame))
        (edge2 (edge2-frame frame))
        (top (make-vect (- (xcor-vect (edge2-frame frame)
                           (xcor-vect (origin-frame frame))
                        (- (ycor-vect (edge1-frame frame)
                           (ycor-vect (origin-frame frame))))))))
    (let ((midpoint1 (half (sub-vect (edge1 origin))))
          (midpoint2 (half (sub-vect (edge2 origin))))
          (midpoint3 (half (sub-vect (top edge1))))
          (midpoint4 (half (sub-vect (top edge2)))))
      (segment->painter (list (make-segment midpoint1 midpoint2)
                              (make-segment midpoint3 midpoint4)))))))