#lang sicp
(define (make-segment x y) (cons x y))
(define (start-segment segment) (car segment))
(define (end-segment segment) (cdr segment))
(define (make-point x y) (cons x y))
(define (x-point point) (car point))
(define (y-point point) (cdr point))
(define (mid-point segment)
  (let ((a (start-segment segment))
        (b (end-segment segment)))
    (make-point (/ (+ (x-point a) (x-point b)) 2.0)
                (/ (+ (y-point a) (y-point b)) 2.0))))
;print
(define (print x y l w)
  (newline)
  (display "perimeter = ")
  (display x)
  (newline)
  (display "area = ")
  (display y)
  (newline)
  (display "length = ")
  (display l)
  (newline)
  (display "width = ")
  (display w))
;perimeter
(define (perimeter1 rect) (* (+ (length1 rect) (width1 rect)) 2))
(define (perimeter2 rect) (* (+ (length2 rect) (width2 rect)) 2))
;area
(define (area1 rect) (* (length1 rect) (width1 rect)))
(define (area2 rect) (* (length2 rect) (width2 rect)))
;use up-left point and down-right-point
(define (make-rectangle1 up-left down-right) (cons up-left down-right))
(define (up-left1 rect) (car rect))
(define (down-right1 rect) (cdr rect))
(define (length1 rect) (- (y-point (up-left1 rect)) (y-point (down-right1 rect))))
(define (width1 rect) (- (x-point (down-right1 rect)) (x-point (up-left1 rect))))
;test 1
(newline)
(display "test1")
(define test1
  (let ((ul (make-point 0 3))
        (dr (make-point 3 0)))
    (define rect1 (make-point ul dr))
      (print (perimeter1 rect1) (area1 rect1) (length1 rect1) (width1 rect1))))
;use left and up segments
(define (make-rectangle2 left-segment up-segment) (cons left-segment up-segment))
(define (left-segment2 rect) (car rect))
(define (up-segment2 rect) (cdr rect))
(define (length-segment segment)
  (let ((x1 (car (start-segment segment)))
        (y1 (cdr (start-segment segment)))
        (x2 (car (end-segment segment)))
        (y2 (cdr (end-segment segment))))
    (if (= y1 y2)
        (abs (- x1 x2))
        (abs (- y1 y2)))))
(define (length2 rect) (length-segment (left-segment2 rect)))
(define (width2 rect) (length-segment (up-segment2 rect)))
;test2
(newline)
(display "test2")
(define test2
  (let ((lf-s (make-point 0 0))
        (lf-e (make-point 0 3))
        (up-s (make-point 0 3))
        (up-e (make-point 3 3)))
    (define rect2 (make-rectangle2 (make-segment lf-s lf-e) (make-segment up-s up-e)))
    (print (perimeter2 rect2) (area2 rect2) (length2 rect2) (width2 rect2))))